services:
  broker:
    image: apache/kafka:latest
    container_name: broker
    network_mode: host
    ports:
      - "9092:9092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://localhost:9092,CONTROLLER://localhost:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@localhost:9093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_NUM_PARTITIONS: 3

  app:
    depends_on:
      - broker
    build: ./
    restart: on-failure
    network_mode: host
    environment:
      SPRING_APPLICATION_JSON: '{ 
          "spring.application.name": "insuranceQuote",
          "catalog.base.url": "http://localhost:1080",
          "spring.kafka.bootstrap-servers": "PLAINTEXT://localhost:9092",
          "spring.kafka.consumer.group-id": "myGroup",
          "producer.topic.name": "insurance-quote-received",
          "consumer.topic.name": "insurance-policy-created",
          "spring.docker.compose.enabled": "true",
          "spring.h2.console.path": "/h2-console",
          "spring.datasource.url": "jdbc:h2:mem:insurance",
          "spring.datasource.driverClassName": "org.h2.Driver",
          "spring.datasource.username": "sa",
          "spring.datasource.password": "sa",
          "spring.jpa.database-platform": "org.hibernate.dialect.H2Dialect"     
     }'
    stdin_open: true
    tty: true